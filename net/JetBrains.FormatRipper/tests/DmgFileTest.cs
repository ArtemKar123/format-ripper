using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using JetBrains.FormatRipper.Compound;
using JetBrains.FormatRipper.Dmg;
using NUnit.Framework;

namespace JetBrains.FormatRipper.Tests;

[TestFixture]
public class DmgFileTest
{
  public struct TestBLKXEntry
  {
    public readonly string Attributes;
    public readonly string CFName;
    public readonly string Checksum;
    public readonly string ID;
    public readonly string Name;

    internal TestBLKXEntry(string attributes, string cfName, string checksum, string id,
      string name)
    {
      Attributes = attributes;
      CFName = cfName;
      Checksum = checksum;
      ID = id;
      Name = name;
    }
  }

  private static object?[] MakeSource(string resourceName, bool hasSignature, params TestBLKXEntry[] blkxEntries) =>
    new object?[] { resourceName, hasSignature, blkxEntries };

  [SuppressMessage("ReSharper", "InconsistentNaming")]
  private static readonly object?[] Sources =
  {
    MakeSource("json-viewer.dmg", true,
      new TestBLKXEntry("0x0050", "Protective Master Boot Record (MBR : 0)",
        "000000020000002018E31A0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "-1",
        "Protective Master Boot Record (MBR : 0)"),
      new TestBLKXEntry("0x0050", "GPT Header (Primary GPT Header : 1)",
        "00000002000000204703BE7900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0",
        "GPT Header (Primary GPT Header : 1)"),
      new TestBLKXEntry("0x0050", "GPT Partition Data (Primary GPT Table : 2)",
        "00000002000000208646D9FD00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "1",
        "GPT Partition Data (Primary GPT Table : 2)"),
      new TestBLKXEntry("0x0050", " (Apple_Free : 3)",
        "00000002000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "2", " (Apple_Free : 3)"),
      new TestBLKXEntry("0x0050", "disk image (Apple_APFS : 4)",
        "00000002000000206A75411100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "3",
        "disk image (Apple_APFS : 4)"),
      new TestBLKXEntry("0x0050", " (Apple_Free : 5)",
        "00000002000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "4", " (Apple_Free : 5)"),
      new TestBLKXEntry("0x0050", "GPT Partition Data (Backup GPT Table : 6)",
        "00000002000000208646D9FD00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "5",
        "GPT Partition Data (Backup GPT Table : 6)"),
      new TestBLKXEntry("0x0050", "GPT Header (Backup GPT Header : 7)",
        "0000000200000020B8E6F5F900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "6",
        "GPT Header (Backup GPT Header : 7)")
    ),
    MakeSource("steam.dmg", true,
      new TestBLKXEntry("0x0050", "Driver Descriptor Map (DDM : 0)",
        "000000020000002078B6699500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "-1",
        "Driver Descriptor Map (DDM : 0)"),
      new TestBLKXEntry("0x0050", "Apple (Apple_partition_map : 1)",
        "0000000200000020B08F107A00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0",
        "Apple (Apple_partition_map : 1)"),
      new TestBLKXEntry("0x0050", "disk image (Apple_HFS : 2)",
        "000000020000002053227FA900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "1",
        "disk image (Apple_HFS : 2)"),
      new TestBLKXEntry("0x0050", " (Apple_Free : 3)",
        "00000002000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "2",
        " (Apple_Free : 3)")
    ),
    MakeSource("steam_not_signed.dmg", false,
      new TestBLKXEntry("0x0050", "Driver Descriptor Map (DDM : 0)",
        "000000020000002078B6699500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "-1",
        "Driver Descriptor Map (DDM : 0)"),
      new TestBLKXEntry("0x0050", "Apple (Apple_partition_map : 1)",
        "0000000200000020B08F107A00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "0",
        "Apple (Apple_partition_map : 1)"),
      new TestBLKXEntry("0x0050", "disk image (Apple_HFS : 2)",
        "000000020000002053227FA900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "1",
        "disk image (Apple_HFS : 2)"),
      new TestBLKXEntry("0x0050", " (Apple_Free : 3)",
        "00000002000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "2",
        " (Apple_Free : 3)")
    )
  };

  [TestCaseSource(typeof(DmgFileTest), nameof(Sources))]
  [Test]
  public unsafe void Test(string name, bool hasSignature, TestBLKXEntry[] expectedEntries)
  {
    var file = ResourceUtil.OpenRead(ResourceCategory.Dmg, name, stream =>
    {
      Assert.IsTrue(DmgFile.Is(stream));
      return DmgFile.Parse(stream);
    });

    Assert.AreEqual(file.BlkxEntries.Count, expectedEntries.Length);
    for (int i = 0; i < file.BlkxEntries.Count; i++)
    {
      var entry = file.BlkxEntries[i];
      byte[] checksum = new byte[MishBlock.checksumSize];
      for (int j = 0; j < checksum.Length; j++)
      {
        checksum[j] = entry.Data.checksum[j];
      }

      var hexChecksum = HexUtil.ConvertToHexString(checksum);

      Assert.AreEqual(entry.Attributes, expectedEntries[i].Attributes);
      Assert.AreEqual(entry.CFName, expectedEntries[i].CFName);
      Assert.AreEqual(hexChecksum, expectedEntries[i].Checksum);
      Assert.AreEqual(entry.ID, expectedEntries[i].ID);
      Assert.AreEqual(entry.Name, expectedEntries[i].Name);
    }

    Assert.AreEqual(hasSignature, file.HasSignature);
  }
}